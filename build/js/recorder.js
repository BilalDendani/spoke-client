define(["jquery","sharedAudio","utils","clientSocket"],function(e,t,n,r){console.log("> Loading recorder.js");var i=t.audioContext,s=r.socket,o=r.ioStream;s.on("audioStreamResult",function(e){console.log("Audio stream result for",e)});var u=function(t,n){if(!(this instanceof u))return new u(t,n);console.log("Creating new Recorder on element",t),n=n||{},this.settings=e.extend({},u.DEFAULTS,n),this.recordBtn=e(t),this.$this=e(this),this.recording=!1,this.binaryAudioStream=null,this.audioMetadata=this.settings.audioMetadata,this.audioMetadata.sampleRate=i.sampleRate,console.log("Recorder AudioMetaData:",this.audioMetadata),this._setupAudioNodes();var r=this;this.recordBtn.click(function(){r.toggle.call(r)})};return u.DEFAULTS={bufferLength:2048,bufferConversion:n.convertFloat32ToInt16,socketioEvents:{emitAudioStream:"audioStream"},audioMetadata:{}},u.socket=s,u.ioStream=o,u.prototype._setupAudioNodes=function(){var e=this;this.scriptRecorderNode=i.createScriptProcessor(this.settings.bufferLength,1,1),this.scriptRecorderNode.onaudioprocess=function(n){e._recorderProcess.call(e,n)}},u.prototype._setupStream=function(e){console.log("Setting up new stream"),this.binaryAudioStream=o.createStream();var t=this.settings.socketioEvents.emitAudioStream;o(s).emit(t,this.binaryAudioStream,this.audioMetadata)},u.prototype._recorderProcess=function(e){var t=e.inputBuffer.getChannelData(0),n=this.settings.bufferConversion(t);this.binaryAudioStream.writeAudio(n)},u.prototype.startRecording=function(){this.recording=!0,console.log(this.$this,this.$this.trigger),this.$this.trigger("start.spoke.recorder"),this.scriptRecorderNode.connect(i.destination),console.log("Setting up recorder.");var e=this;t.audioStreamPromise.then(function(t){console.log("Then got audioStreamSource for recorder"),t.connect(e.scriptRecorderNode),console.log("Recorder started")}).catch(function(t){console.log("Audio streaming error in recorder:",t),e.stop()})},u.prototype.stopRecording=function(){this.scriptRecorderNode.disconnect(),this.binaryAudioStream.end(),this.binaryAudioStream=null,this.recording=!1,this.$this.trigger("stop.spoke.recorder")},u.prototype.toggle=function(){this.recording?(console.log("Disconnecting recorder"),this.stopRecording()):(console.log("Starting recorder"),this._setupStream(),this.startRecording())},u.prototype.on=function(e,t,n){return this.$this.on(e,t,n)},u});